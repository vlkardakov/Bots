
from gpt2 import gpt_thinks
from memory import *
import time
import numpy as np
def clean_string(s, bads):
    bad_chars = np.array(list(bads))
    return "".join([c for c in s if c not in bad_chars])

def main():
    role = "Злой бот "
    chat_history = []
    print(f"{role} started.  Type 'exit' to quit.")
    bot_memory = load_memory("bot")
    while True:
        user_input = """
        Эмбоссер
ограничение по времени на тест1 секунда
ограничение по памяти на тест256 мегабайт
Эмбоссер представляет собой устройство, состоящее из барабана с написанными на нём символами и предназначенное для печати и выдавливания символов на ленте. На барабане написано 
N
 различных символов. Барабан эмбоссера вращается против часовой стрелки, за одно вращение можно перейти к следующему символу на барабане. Изначально барабан эмбоссера находится в положении, в котором можно напечатать символ 1. При вращении барабана можно перейти к символу 2 и т.д. Если барабан находится в положении печати символа 
N
, то после одного вращения можно будет напечатать символ 1.

Вася работает в отделе контроля качества на фабрике эмбоссеров. Ему было поручено напечатать на полоске текст, состоящий из символов с номерами 
v
1
, 
v
2
, ..., 
v
n
, повторяя его бесконечное количество раз, т.е. после печати символа 
v
n
 Вася снова начинает печатать текст, начиная с символа 
v
1
. Текст состоит только из всех символов от 1 до 
N
, и каждый символ встречается в нём ровно один раз, т.е. последовательность чисел 
v
1
, 
v
2
, ..., 
v
n
 является перестановкой чисел от 1 до 
N
.

После того как Вася напечатал на полоске 
K
 символов, эмбоссер немедленно сломался. Определите, сколько вращений барабана совершил Вася до этого момента.

Входные данные
В первой строке записаны целые числа 
N
 (
1
≤
N
≤
100
000
) и 
K
 (
1
≤
K
≤
10
9
) — количество различных символов на барабане эмбоссера, совпадающее с количеством символов в тексте, и количество напечатанных Васей символов соответственно.

В следующих 
N
 строках записаны числа 
v
i
 (
1
≤
v
i
≤
N
) — перестановка чисел от 1 до 
N
, задающая текст, который необходимо напечатать.

Выходные данные
Выведите одно число — количество вращений барабана, которое совершил Вася до того, как эмбоссер сломался.

Система оценки
Решения, верно работающие при 
N
,
K
≤
1000
, будут набирать не менее 40 баллов.

Решения, верно работающие при 
K
≤
50
000
, будут набирать не менее 60 баллов.

Примеры
Входные данные
3 5
1
2
3
Выходные данные
4
Входные данные
4 6
4
2
1
3
Выходные данные
13
Входные данные
10 7
1
10
2
9
3
8
4
7
5
6
Выходные данные
33
Примечание
В первом примере Вася печатает символ 1, затем совершает одно вращение, печатает символ 2, совершает еще одно вращение, печатает символ 3, на этом текст заканчивается. Вася начинает печатать текст сначала: он совершает вращение барабана, печатает символ 1, совершает еще одно вращение и печатает символ 2. После 5 напечатанных символов эмбоссер ломается, итоговое количество вращений барабана равно 4.

Во втором примере эмбоссер может напечатать символ 1, для перехода к символу 4 необходимо совершить 3 вращения, затем, для перехода к символу 2 — 2 вращения, к символу 1 — 3 вращения, к символу 3 — 2 вращения. На этом текст кончается, печать текста начинается заново. Для перехода от символа 3 к символу 4 необходимо 1 вращение, к символу 2 от символа 4 — 2 вращения. Итоговое количество вращений равно 13
        
        """
        if user_input.lower() == "exit":
            print("Exiting...")
            break
        try:
            aaa = "Кот"
            a = gpt_thinks(aaa, f"{user_input}", load_memory("system"), chat_history, bot_memory)
            ans, memory, chat_history, bot_memory = a
            save_memory("bot", bot_memory, True)
            save_memory(clean_string(aaa, "<>[]|`/\»"), memory, False)
            #print(ans)
            print(f"{role}: {ans}")
        except Exception as e:
            print(f"too many requests or {e}")
            time.sleep(10)
            chat_history = []
            print("Произошла ошибка... Давайте наачнем снова.")

main()

